```{r echo = FALSE, message = FALSE}
#### Setup ####
source(here::here("scripts","Clean","setup.R"))
data_4 <- read.csv(here::here("scripts", "data", "data_question24.csv"))
threashold_heatmap <- 0.5
```

# Focus on relationship between SDGs
**How are the different SDGs linked? (We want to see if some SDGs are linked in the fact that a high score on one implies a high score on the other, and thus if we can make groups of SDGs that are comparable in that way).**

## EDA: General visualization of the SDGs

First, let's look at how our goals are ditributed. To do that, it is important to show the distribution at a year level since showing it a once would be impacted by the change over the year. We created below a shiny app that allows us to select the year we want to look at and see the distribution of the goals for that year. Since shiny apps are not well supported with quarto, we show here only scrrenshots. We chose to show year 2000 and year 2023 to see both extreme in terms of ditribution. it is interesting to see how the goals tended to be skewed in the past, well representing the developping countries lagging behind. But the ditribution beeing more normaly ditributed in recent years.

```{r echo = TRUE, message = FALSE, warning=FALSE}
data_long <- data_4 %>% 
  gather(key = "goal", value = "score", goal1:goal17) %>%
  mutate(goal = factor(goal, levels = paste0("goal", 1:17)))

ui <- fluidPage(
  titlePanel("Goals Score Distribution"),
  sidebarLayout(
    sidebarPanel(
      selectInput("year", "Year", choices = unique(data_long$year))
    ),
    mainPanel(
      plotOutput("ridgePlot")
    )
  )
)

server <- function(input, output) {
  output$ridgePlot <- renderPlot({
    filteredData <- filter(data_long, year == input$year)
    ggplot(filteredData, aes(x = score, y = goal, fill = stat(x))) +
      geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) +
      geom_density_ridges_gradient(scale = 3, size = 0.3, rel_min_height = 0.01) +
      scale_fill_viridis_c(name = "Value", option = "C") +
      labs(title = paste("Goal Score Distribution in", input$year))
  })
}

shinyApp(ui = ui, server = server)
```

We now interest ourself to the correlation between the goals scores To do that we chose to use a correlation heatmap. We set an arbitrary threashold to better concentrate our attention to the most corrolated goals. We fixed our threashold at `r threashold_heatmap` (indicating a strong positive relationship) and less than -`r threashold_heatmap` (signifying a strong negative relationship).

Given that our variables, as seen previously, do not follow a normal distribution, employing the Pearson correlation method is not suitable in our analysis since it requires observations to be normaly distributed. We attempted to normalize the data through logarithmic or square root transformations, but these adjustments were insufficiently effective. Consequently, we will resort to computing the Spearman correlation. While not ideal, this method does not necessitate the normal distribution of our data. In our analysis, particularly for the heatmap visualization, we will focus on correlations that exceed the threshold of `r threashold_heatmap` or fall below -`r threashold_heatmap`. This selective approach will enhance the readability and interpretability of the heatmap.

To do that, we select only the colums of interest and compute the correlation matrix using Spearman correlation. We then melt the matrix to be able to plot it. We then plot the heatmap using `ggplot2`.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Preparation of the data ####

data_4_goals <- data_4 %>%
  dplyr::select(overallscore, goal1, goal2, goal3, goal4, goal5,
                goal6,goal7, goal8, goal9, goal10, goal11, goal12,
                goal13, goal15, goal16, goal17)
```

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Spearman Correlation ####

spearman_corr_4 <- cor(data_4_goals, method = "spearman", use = "everything")
spearman_corr_4[abs(spearman_corr_4) < threashold_heatmap] <- NA
```

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Spearman Correlation Heatmap ####

# Melting the data
melted_corr_4 <- melt(spearman_corr_4, na.rm = TRUE)

# Creating the heatmap
ggplot(data = melted_corr_4, aes(x = Var1, y = Var2, fill = value)) +
    geom_tile() +
    geom_text(aes(label = sprintf("%.2f", value)), vjust = 0.5, size=2.5) + # Adding text
    scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                         midpoint = 0, limit = c(-1,1), space = "Lab", 
                         name="Spearman\nCorrelation",
                         na.value = "grey") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Heatmap of Spearman Correlations for Goals", 
         x = "", y = "")
```

The correaltion can be read on the graph. The darker the color, the stronger the correlation. If there is not colors, it means that the gaols correlation those not exceed our threashold of Â±`r threashold_heatmap`.

It is evident that the Sustainable Development Goals (SDGs) are intricately interconnected. However, certain goals appear to be less interrelated compared to others. Specifically, SDG 1 (No Poverty) and SDG 10 (Reduced Inequalities) demonstrate a weaker correlation with the rest of the goals. Similarly, Goal 15 (Life on Land) also exhibits a lesser degree of interconnection with the other SDGs.

## Analysis: Factor analysis of the SDGs

At this point, we saw that the goals were mostly correlated. We now want to see if we can group them in a smaller number of factors. To do that, we will use a principal component analysis (PCA). We will first look at the scree plot to see how many factors we should keep. We will then look at the biplot to see how the goals are grouped together.

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Scree Plot ####

# Selecting only the goals
goals_data <- data_4 %>%
  dplyr::select(goal1, goal2, goal3, goal4, goal5,
                goal6,goal7, goal8, goal9, goal10, goal11, goal12,
                goal13, goal15, goal16, goal17)
goals_data_scaled <- scale(goals_data) # Scaling the data
pca_result <- prcomp(goals_data_scaled) # Running PCA

# Plotting Scree plot to visualize the importance of each principal component
fviz_eig(pca_result,
         addlabels = TRUE) +
  theme_minimal()
```

```{r echo = TRUE, message = FALSE, warning=FALSE}
#### Biplot ####

# Plotting Biplot to visualize the two main dimensions
fviz_pca_biplot(pca_result,
                label="var",
                col.var="dodgerblue3",
                geom="point",
                pointsize = 0.1,
                labelsize = 4) +
  theme_minimal()
```

In our EDA on the focus on the influence of the factors over the SDG scores, we had made a correlation matrix heatmap that took into account every variable of our dataset. Here, we tried to zoom on certain parts of the heatmap. We have decided to add on our graphs the correlations between variables when our pvalue was significant (alpha = 0.05). The grey zones are concerning our non-significant pvalues.



/////////////////////////////////////////////////////////////////////////

```{r echo = TRUE, message = FALSE, warning=FALSE}
goals_data <- data_4 %>%
  dplyr::select(overallscore, goal1, goal2, goal3, goal4, goal5,
                goal6,goal7, goal8, goal9, goal10, goal11, goal12,
                goal13, goal15, goal16, goal17)

fit <- lm(overallscore ~ ., data = goals_data)
# plot(fit)
library(leaps)
leaps<-regsubsets(overallscore ~ .,data=goals_data,nbest=10)
# summary(leaps)
plot(leaps,scale="r2") + theme_minimal()
```

